 Temas tratados
1. Template Literals
Permiten interpolar variables dentro de strings usando backticks ` y ${variable}.
M√°s legibles que la concatenaci√≥n con +.
√ötiles para saltos de l√≠nea y textos din√°micos.
2. Scopes en JavaScript
Var: Tiene scope de funci√≥n. Permite redeclaraci√≥n, lo que puede causar errores.
Let: Tiene scope de bloque. No permite redeclaraci√≥n en el mismo bloque.
Const: Scope de bloque. No permite reasignaci√≥n ni redeclaraci√≥n.
3. TypeScript
Superset de JavaScript creado por Microsoft.
Permite tipado est√°tico y mejora la calidad del c√≥digo.
Se compila a JavaScript usando:
tsc archivo.ts
4. Tipos de datos en TypeScript
string, number, boolean, array, any, union types
Tipado expl√≠cito vs. impl√≠cito
Validaci√≥n en tiempo de compilaci√≥n
5. Funciones tipadas
Par√°metros obligatorios y opcionales (?)
Valores por defecto
Tipado de retorno
6. Enums
Definen conjuntos de valores espec√≠ficos (ej. Dispositivo.Web, Dispositivo.Mobile)
√ötiles para representar estados o categor√≠as fijas
7. Interfaces
Describen la forma de un objeto
Permiten reutilizaci√≥n y validaci√≥n estructural
Ejemplo:
interface Gato {
  nombre: string;
  edad: number;
  colores: string[];
}
üì¶ NPM y manejo de dependencias
Inicializaci√≥n de proyecto
npm init ‚Üí crea package.json
Scripts personalizados con npm run nombre_script
Instalaci√≥n de dependencias
npm install typescript ‚Üí agrega a node_modules
package-lock.json ‚Üí registra dependencias exactas
node_modules ‚Üí carpeta que no se sube al repositorio